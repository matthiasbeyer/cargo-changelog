name: CI

on:
  push:
    branches: [master, staging, trying, release-*]
  pull_request:
    branches: [master, release-*]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.67.0
          - stable
          - beta
          # - nightly

    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: ${{ matrix.rust }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: swatinem/rust-cache@v2
      - name: cargo-check
        run: cargo check

  deny:
    name: deny
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
    - uses: actions/checkout@v3
    - name: cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}


  fmt:
    name: format
    runs-on: ubuntu-latest

    # required because we have a different toolchain in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: 1.67.0

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.67.0
          components: rustfmt
      - name: cargo-fmt
        run: cargo fmt -- --check


  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.67.0
          - stable
          - beta
          # - nightly

    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: ${{ matrix.rust }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: swatinem/rust-cache@v2
      - name: cargo-test
        run: cargo test --all --all-features


  clippy:
    name: clippy
    runs-on: ubuntu-latest

    # required because we have a different toolchain in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: 1.67.0

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.67.0
          components: clippy
      - uses: swatinem/rust-cache@v2
      - name: cargo-clippy
        run: cargo clippy --all --all-targets --all-features -- -D warnings

  nix-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v12
        with:
          name: cargo-changelog
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - run: nix --extra-experimental-features "nix-command flakes" flake check

  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: CI
    if: ${{ success() }}
    needs:
      - check
      - nix-checks
      - clippy
      - deny
      - fmt
      - test
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
